from fastapi import APIRouter, Body, HTTPException, UploadFile, File
from pydantic import BaseModel
from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings
from app.core.rag import get_conversational_chain, DB_FAISS_PATH, create_vector_store
import os
import shutil

router = APIRouter()

class Question(BaseModel):
    text: str

@router.post("/ask")
def ask_question(question: Question = Body(...)):
    """
    Accepts a question, retrieves relevant context from the FAISS vector store,
    and returns an answer generated by the Gemini model.
    """
    try:
        embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
        
        # Load the FAISS index from disk
        db = FAISS.load_local(DB_FAISS_PATH, embeddings, allow_dangerous_deserialization=True)

        # Perform similarity search
        docs = db.similarity_search(question.text)

        # Get the conversational chain and run it
        chain = get_conversational_chain()
        response = chain(
            {"input_documents": docs, "question": question.text}
        )
        
        # Extract sources from the input documents
        sources = []
        for doc in docs:
            sources.append({
                "page_content": doc.page_content,
                "metadata": doc.metadata
            })
        
        return {
            "answer": response["output_text"],
            "sources": sources
        }

    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Vector store not found. Please run the indexing script first.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred: {str(e)}")

@router.post("/upload")
async def upload_document(file: UploadFile = File(...)):
    """
    Accepts a PDF file, saves it to the documents directory,
    and triggers the re-indexing of the vector store.
    """
    documents_path = 'documents'
    file_path = os.path.join(documents_path, file.filename)

    try:
        # Save the uploaded file
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # Trigger the vector store creation process
        create_vector_store(documents_path)
        
        return {"message": f"File '{file.filename}' uploaded and indexed successfully."}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An error occurred during file upload and indexing: {str(e)}")